#Android SDK path on windows is C:\Users\your_user\AppData\Local\Android\Sdk

cmake_minimum_required(VERSION 3.22.1)

project(RDEAndroidApp)

# Instruct our compiler that we want to use C++ 17 and use exceptions.
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -fexceptions")

set(CMAKE_BUILD_TYPE %s) # release or debug
string(TOLOWER ${CMAKE_BUILD_TYPE} BUILD_VARIANT_DIR)
set(RDE_PATH %s) # absolute path to RDE

# Location of our third party libraries.
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH})

add_compile_definitions(SDL_DISABLE_MMINTRIN_H SDL_DISABLE_XMMINTRIN_H SDL_DISABLE_EMMINTRIN_H SDL_DISABLE_PMMINTRIN_H SDL_DISABLE_IMMINTRIN_H)

add_compile_options(%s) # as many modules as needed, ex: -DRDE_RENDERING_MODULE -DRDE_ERROR_MODULE -DRDE_PHYSICS_3D_MODULE

# Location of the .so files generated by the 'sdl' module.
set(SDL_SO_DIR "${CMAKE_SOURCE_DIR}/precompiledLibs-${BUILD_VARIANT_DIR}/lib/${ANDROID_ABI}")


# This is the main SDL library target, we will name it 'sdl3'.
add_library(
        sdl3
        SHARED
        IMPORTED
)

# This is the built in NDK logging library
find_library(log-lib log)
add_subdirectory(modules/cglm)

# Set the target type of the SDL lib
set_target_properties(
        sdl3
        PROPERTIES
        IMPORTED_LOCATION
        ${SDL_SO_DIR}/libSDL3.so
)


# Include all dependency paths of the engine
include_directories(${RDE_PATH}/external/include)
include_directories(${RDE_PATH}/external/include/imgui)
include_directories(${RDE_PATH}/external/include/JoltC)
include_directories(${RDE_PATH}/engine/include)
include_directories(${CMAKE_SOURCE_DIR}/sdl/jni/SDL/src/core/android)
include_directories(${CMAKE_SOURCE_DIR}/sdl/jni/SDL/include)
include_directories(${CMAKE_SOURCE_DIR}/sdl/jni/SDL/include/SDL3)
include_directories(${CMAKE_SOURCE_DIR}/sdl/jni/SDL/src)

# Define all of the source files to be compiled
set(IMGUI_SOURCES ${RDE_PATH}/external/include/imgui/imgui.cpp
		 		  ${RDE_PATH}/external/include/imgui/imgui_draw.cpp
				  ${RDE_PATH}/external/include/imgui/imgui_tables.cpp
				  ${RDE_PATH}/external/include/imgui/imgui_widgets.cpp
				  ${RDE_PATH}/external/include/imgui/backends/imgui_impl_sdl3.cpp
				  ${RDE_PATH}/external/include/imgui/backends/imgui_impl_opengl3.cpp
				  ${RDE_PATH}/external/include/imgui/rde_imgui.cpp
		)
file(GLOB_RECURSE CPP_SOURCES ${RDE_PATH}/external/include/JoltC/Jolt/*.cpp
							  ${RDE_PATH}/external/include/JoltC/*.cpp
							  ${RDE_PATH}/engine/src/rde.c)

set(GL_PROFILES "GL_PROFILE_GLES2" "GL_PROFILE_GLES3")

# Include all of the engine's libs dependencies
set(TARGET_LIBRARIES
        sdl3
        ${log-lib}
        GLESv3
        EGL
		cglm

		# This one is needed or otherwise AXXX_FuncXXX won't work
		android
    )

add_compile_options(-DJPH_ENABLE_ASSERTS)
#GDEFirebase
# Generate the engine lib
add_library(RDEAndroid
            SHARED
            ${CPP_SOURCES}
			${IMGUI_SOURCES}
)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)
target_link_libraries(RDEAndroid ${TARGET_LIBRARIES})

# Define all app's source files
set(APP_SOURCES %s) # source code of the application

add_compile_options(-DJPH_ENABLE_ASSERTS)
# Create application main lib. Yes, the "executable" of the APK is a lib containing a int main(...) { ... }
add_library(RDEAndroidApp
		SHARED
		${APP_SOURCES}
)

# Finally we export the final library, which contains the application code + RDE's lib.
target_link_libraries(RDEAndroidApp RDEAndroid)
target_compile_definitions(RDEAndroidApp PRIVATE ${GL_PROFILES})
