#Android SDK path on windows is C:\Users\your_user\AppData\Local\Android\Sdk

cmake_minimum_required(VERSION 3.18.1)

project(RDEAndroid)

# Instruct our compiler that we want to use C++ 17 and use exceptions.
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -fexceptions")

# Determine what build type we are in, shifted to lower case (debug or release).
set(CMAKE_BUILD_TYPE release)
string(TOLOWER ${CMAKE_BUILD_TYPE} BUILD_VARIANT_DIR)
set(RDE_PATH ${CMAKE_SOURCE_DIR}/../RDE/)

# Location of our third party libraries.
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH})

add_compile_definitions(SDL_DISABLE_MMINTRIN_H SDL_DISABLE_XMMINTRIN_H SDL_DISABLE_EMMINTRIN_H SDL_DISABLE_PMMINTRIN_H SDL_DISABLE_IMMINTRIN_H)

add_compile_options(-DRDE_RENDERING_MODULE)
add_compile_options(-DRDE_ERROR_MODULE)
add_compile_options(-DRDE_FILE_SYSTEM_MODULE)
add_compile_options(-DRDE_OBJ_MODULE)
add_compile_options(-DRDE_PHYSICS_3D_MODULE)

set(SDL_DIR "sdl/jni/SDL")

# Location of the .so files generated by the 'sdl' module.
set(SDL_SO_DIR "${CMAKE_SOURCE_DIR}/precompiledLibs-${BUILD_VARIANT_DIR}/lib/${ANDROID_ABI}")
set(CMAKE_BUILD_TYPE release)


# This is the main SDL library target, we will name it 'sdl2'.
add_library(
        sdl2
        SHARED
        IMPORTED
)

# This is the built in NDK logging library
find_library(log-lib log)
add_subdirectory(modules/cglm)

set_target_properties(
        sdl2
        PROPERTIES
        IMPORTED_LOCATION
        ${SDL_SO_DIR}/libSDL2.so
)


# We will tell our build system where to look for third party header files.
include_directories(${RDE_PATH}/external/include)
include_directories(${RDE_PATH}/external/include/SDL2)
include_directories(${RDE_PATH}/engine/include)

set(APP_HEADERS )
set(APP_SOURCES ${RDE_PATH}/examples/hub.cpp)
file(GLOB_RECURSE CPP_SOURCES ${RDE_PATH}/external/include/Jolt/*.cpp 
							  ${RDE_PATH}/external/include/JoltC/*.cpp  
							  ${RDE_PATH}/engine/src/rde.c)

set(GL_PROFILES "GL_PROFILE_GLES2" "GL_PROFILE_GLES3")

set(TARGET_LIBRARIES
        sdl2
        ${log-lib}
        GLESv3
        EGL
		cglm
    )

#GDEFirebase

add_library(RDEAndroid
            SHARED
            ${CPP_HEADERS}
            ${CPP_SOURCES}
			${APP_HEADERS}
            ${APP_SOURCES}
)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# Finally, we need to link all the libraries we want to use in our project together, remembering that the 'a-simple-triangle' library is in fact our own C++ code. Note also we are including the 'GLESv2' library for OpenGL ES2 support, though we don't need to define it ourselves with the 'add_library' commands.
target_link_libraries(RDEAndroid ${TARGET_LIBRARIES})

target_compile_definitions(RDEAndroid PRIVATE ${GL_PROFILES})
