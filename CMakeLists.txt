cmake_minimum_required(VERSION 3.18.1)

project(GDEAndroid)

# Instruct our compiler that we want to use C++ 17 and use exceptions.
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -fexceptions")

# Determine what build type we are in, shifted to lower case (debug or release).
set(CMAKE_BUILD_TYPE release)
string(TOLOWER ${CMAKE_BUILD_TYPE} BUILD_VARIANT_DIR)
set(RDE_PATH /Users/macmini/Documents/RDE)

# Location of our third party libraries.
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH})

add_compile_definitions(SDL_DISABLE_MMINTRIN_H SDL_DISABLE_XMMINTRIN_H SDL_DISABLE_EMMINTRIN_H SDL_DISABLE_PMMINTRIN_H SDL_DISABLE_IMMINTRIN_H)

set(SDL_DIR "sdl/jni/SDL")
set(SDL_MIXER_DIR "sdl/jni/SDL_mixer")
set(SDL_NET_DIR "${LIBS}/SDL_net")
set(SDL_IMAGE_DIR "sdl/jni/SDL_image")
set(FREETYPE_DIR "modules/freetype")
set(GLM_DIR "modules/glm")
set(ENTT_DIR "modules/entt")
set(JSON_DIR "modules/json")
set(CHIPMUNK_DIR "modules/Chipmunk2D")

# Location of the .so files generated by the 'sdl' module.
set(SDL_SO_DIR "${CMAKE_SOURCE_DIR}/precompiledLibs-${BUILD_VARIANT_DIR}/lib/${ANDROID_ABI}")
set(CMAKE_BUILD_TYPE release)


# This is the main SDL library target, we will name it 'sdl2'.
add_library(
        sdl2
        SHARED
        IMPORTED
)

add_library(
        sdl2_mixer
        SHARED
        IMPORTED
)

add_library(
        sdl2_image
        SHARED
        IMPORTED
)

add_library(
        mpg123
        SHARED
        IMPORTED
)

# This is the built in NDK logging library
find_library(log-lib log)
add_subdirectory(modules/freetype)
add_subdirectory(modules/Chipmunk2D)
add_subdirectory(modules/glm)
add_subdirectory(modules/entt)
add_subdirectory(modules/json)

set_target_properties(
        sdl2
        PROPERTIES
        IMPORTED_LOCATION
        ${SDL_SO_DIR}/libSDL2.so
)

set_target_properties(
        sdl2_mixer
        PROPERTIES
        IMPORTED_LOCATION
        ${SDL_SO_DIR}/libSDL2_mixer.so
)

set_target_properties(
        sdl2_image
        PROPERTIES
        IMPORTED_LOCATION
        ${SDL_SO_DIR}/libSDL2_image.so
)

set_target_properties(
        mpg123
        PROPERTIES
        IMPORTED_LOCATION
        ${SDL_SO_DIR}/libmpg123.so
)


# We will tell our build system where to look for third party header files.
include_directories(${RDE_PATH}/vcpkg/installed/x64-osx/include)
include_directories(${RDE_PATH}/vcpkg/installed/x64-osx/include/SDL2)
include_directories(${RDE_PATH}/nonVcpkgDeps/Chipmunk2D/include)
include_directories(${RDE_PATH}/engine/include)

set(APP_HEADERS /Users/macmini/Documents/RDE/editor)
set(APP_SOURCES /Users/macmini/Documents/RDE/editor)
# We will recursively collate all .hpp header and .cpp source files under the main source directory as the input for the compilation.
file(GLOB_RECURSE CPP_HEADERS ${RDE_PATH}/engine/include/*.h* ${APP_HEADERS}/*.h)
file(GLOB_RECURSE CPP_SOURCES ${RDE_PATH}/engine/src/*.cpp ${APP_SOURCES}/*.cpp)

set(GL_PROFILES "GL_PROFILE_GLES2" "GL_PROFILE_GLES3")

set(TARGET_LIBRARIES
        sdl2
        sdl2_mixer
#        sdl2_net
        sdl2_image
        mpg123
        freetype
        glm
        ${log-lib}
        GLESv3
        EGL
        chipmunk
    )

#GDEFirebase

add_library(GDEAndroid
            SHARED
            ${CPP_HEADERS}
            ${CPP_SOURCES}
)

# Finally, we need to link all the libraries we want to use in our project together, remembering that the 'a-simple-triangle' library is in fact our own C++ code. Note also we are including the 'GLESv2' library for OpenGL ES2 support, though we don't need to define it ourselves with the 'add_library' commands.
target_link_libraries(GDEAndroid ${TARGET_LIBRARIES})

target_compile_definitions(GDEAndroid PRIVATE ${GL_PROFILES})
